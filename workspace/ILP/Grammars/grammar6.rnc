# -*- coding: utf-8 -*-
# ******************************************************************
# ILP - Implantation d'un langage de programmation.
# Copyright (C) 2004 <Christian.Queinnec@lip6.fr>
# $Id: grammar6.rnc 554 2006-11-04 13:43:32Z queinnec $
# GPL version>=2
# ******************************************************************

# Sixième version du langage étudié: ILP6 pour « Inouï Langage
# Performant ». Pourquoi pas ajouter un attribut pour retenir les 
# numéros de ligne du programme initial ?

include "grammar4.rnc"
start |= programme6

# On ajoute quelques expressions permettant de manipuler des objets
# (des tables associatives qui ont de la classe).

expression |=
   creationObjet
 | lectureChamp
 | ecritureChamp
 | envoiMessage
 | appelSuper
 | moi

# Un programme peut aussi contenir des définitions de classes en tête.

programme6 = element programme6 {
   ( definitionFonction | definitionClasse ) *,
   expression +
}

# Une définition de classe comporte un nom, le nom de la super-classe
# (c'est de l'héritage simple), des champs et des méthodes. Une
# restriction du langage est que tous les noms de champs distincts
# doivent être différents ou, plus exactement, quand un champ F est
# défini pour une classe C, seules les sous-classes de C peuvent
# parler de F et aucune autre classe ne peut définir un autre champ
# pareillement nommé (un renommage global permet d'assurer cela).

definitionClasse = element definitionClasse {
   attribute nom    { xsd:Name - ( xsd:Name { pattern = "(ilp|ILP)" } ) },
   attribute parent { xsd:Name - ( xsd:Name { pattern = "(ilp|ILP)" } ) } ?,
   element champs {
      element champ {
         attribute nom { xsd:Name - ( xsd:Name { pattern = "(ilp|ILP)" } ) }
      } *
   } ?,
   element methodes {
      element methode {
         attribute nom { xsd:Name - ( xsd:Name { pattern = "(ilp|ILP)" } ) },
         element variables { variable * },
         element corps     { expression + }
      } *
   } ?
}

# Allouer un objet.

creationObjet = element creationObjet {    # new Classe(arguments)
   attribute classe  { xsd:Name - ( xsd:Name { pattern = "(ilp|ILP)" } ) },
   expression *
}

# Lire un champ d'objet

lectureChamp = element lectureChamp {      # objet.champ
   attribute champ { xsd:Name - ( xsd:Name { pattern = "(ilp|ILP)" } ) },
   element cible   { expression }
}

# Écrire dans un champ d'objet

ecritureChamp = element ecritureChamp {    # objet.champ = expression
   attribute champ { xsd:Name - ( xsd:Name { pattern = "(ilp|ILP)" } ) },
   element cible   { expression },
   element valeur  { expression }
}

# Envoyer un message à un objet accompagné de quelques arguments.

envoiMessage = element envoiMessage {      # receveur.message(arguments)
   attribute message { xsd:Name - ( xsd:Name { pattern = "(ilp|ILP)" } ) },
   element receveur  { expression },
   element arguments { expression * }
}

# Invoquer la méthode de la super-classe (la méthode qui aurait été
# invoquée à la place de l'actuelle).

appelSuper = element appelSuper {          # super()
   empty
}

# La pseudo-variable permettant de parler de soi.

moi = element moi {                        # this
   empty
}

# fin de grammar6.rnc


