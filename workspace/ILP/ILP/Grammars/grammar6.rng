<?xml version="1.0" encoding="utf-8"?>
<grammar xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">
  <!--
    -*- coding: utf-8 -*-
    ******************************************************************
    ILP - Implantation d'un langage de programmation.
    Copyright (C) 2004 <Christian.Queinnec@lip6.fr>
    $Id: grammar6.rnc 554 2006-11-04 13:43:32Z queinnec $
    GPL version>=2
    ******************************************************************
  -->
  <!--
    Sixième version du langage étudié: ILP6 pour « Inouï Langage
    Performant ». Pourquoi pas ajouter un attribut pour retenir les 
    numéros de ligne du programme initial ?
  -->
  <include href="grammar4.rng"/>
  <start combine="choice">
    <ref name="programme6"/>
  </start>
  <!--
    On ajoute quelques expressions permettant de manipuler des objets
    (des tables associatives qui ont de la classe).
  -->
  <define name="expression" combine="choice">
    <choice>
      <ref name="creationObjet"/>
      <ref name="lectureChamp"/>
      <ref name="ecritureChamp"/>
      <ref name="envoiMessage"/>
      <ref name="appelSuper"/>
      <ref name="moi"/>
    </choice>
  </define>
  <!-- Un programme peut aussi contenir des définitions de classes en tête. -->
  <define name="programme6">
    <element name="programme6">
      <zeroOrMore>
        <choice>
          <ref name="definitionFonction"/>
          <ref name="definitionClasse"/>
        </choice>
      </zeroOrMore>
      <oneOrMore>
        <ref name="expression"/>
      </oneOrMore>
    </element>
  </define>
  <!--
    Une définition de classe comporte un nom, le nom de la super-classe
    (c'est de l'héritage simple), des champs et des méthodes. Une
    restriction du langage est que tous les noms de champs distincts
    doivent être différents ou, plus exactement, quand un champ F est
    défini pour une classe C, seules les sous-classes de C peuvent
    parler de F et aucune autre classe ne peut définir un autre champ
    pareillement nommé (un renommage global permet d'assurer cela).
  -->
  <define name="definitionClasse">
    <element name="definitionClasse">
      <attribute name="nom">
        <data type="Name">
          <except>
            <data type="Name">
              <param name="pattern">(ilp|ILP)</param>
            </data>
          </except>
        </data>
      </attribute>
      <optional>
        <attribute name="parent">
          <data type="Name">
            <except>
              <data type="Name">
                <param name="pattern">(ilp|ILP)</param>
              </data>
            </except>
          </data>
        </attribute>
      </optional>
      <optional>
        <element name="champs">
          <zeroOrMore>
            <element name="champ">
              <attribute name="nom">
                <data type="Name">
                  <except>
                    <data type="Name">
                      <param name="pattern">(ilp|ILP)</param>
                    </data>
                  </except>
                </data>
              </attribute>
            </element>
          </zeroOrMore>
        </element>
      </optional>
      <optional>
        <element name="methodes">
          <zeroOrMore>
            <element name="methode">
              <attribute name="nom">
                <data type="Name">
                  <except>
                    <data type="Name">
                      <param name="pattern">(ilp|ILP)</param>
                    </data>
                  </except>
                </data>
              </attribute>
              <element name="variables">
                <zeroOrMore>
                  <ref name="variable"/>
                </zeroOrMore>
              </element>
              <element name="corps">
                <oneOrMore>
                  <ref name="expression"/>
                </oneOrMore>
              </element>
            </element>
          </zeroOrMore>
        </element>
      </optional>
    </element>
  </define>
  <!-- Allouer un objet. -->
  <define name="creationObjet">
    <element name="creationObjet">
      <!-- new Classe(arguments) -->
      <attribute name="classe">
        <data type="Name">
          <except>
            <data type="Name">
              <param name="pattern">(ilp|ILP)</param>
            </data>
          </except>
        </data>
      </attribute>
      <zeroOrMore>
        <ref name="expression"/>
      </zeroOrMore>
    </element>
  </define>
  <!-- Lire un champ d'objet -->
  <define name="lectureChamp">
    <element name="lectureChamp">
      <!-- objet.champ -->
      <attribute name="champ">
        <data type="Name">
          <except>
            <data type="Name">
              <param name="pattern">(ilp|ILP)</param>
            </data>
          </except>
        </data>
      </attribute>
      <element name="cible">
        <ref name="expression"/>
      </element>
    </element>
  </define>
  <!-- Écrire dans un champ d'objet -->
  <define name="ecritureChamp">
    <element name="ecritureChamp">
      <!-- objet.champ = expression -->
      <attribute name="champ">
        <data type="Name">
          <except>
            <data type="Name">
              <param name="pattern">(ilp|ILP)</param>
            </data>
          </except>
        </data>
      </attribute>
      <element name="cible">
        <ref name="expression"/>
      </element>
      <element name="valeur">
        <ref name="expression"/>
      </element>
    </element>
  </define>
  <!-- Envoyer un message à un objet accompagné de quelques arguments. -->
  <define name="envoiMessage">
    <element name="envoiMessage">
      <!-- receveur.message(arguments) -->
      <attribute name="message">
        <data type="Name">
          <except>
            <data type="Name">
              <param name="pattern">(ilp|ILP)</param>
            </data>
          </except>
        </data>
      </attribute>
      <element name="receveur">
        <ref name="expression"/>
      </element>
      <element name="arguments">
        <zeroOrMore>
          <ref name="expression"/>
        </zeroOrMore>
      </element>
    </element>
  </define>
  <!--
    Invoquer la méthode de la super-classe (la méthode qui aurait été
    invoquée à la place de l'actuelle).
  -->
  <define name="appelSuper">
    <element name="appelSuper">
      <!-- super() -->
      <empty/>
    </element>
  </define>
  <!-- La pseudo-variable permettant de parler de soi. -->
  <define name="moi">
    <element name="moi">
      <!-- this -->
      <empty/>
    </element>
  </define>
</grammar>
<!-- fin de grammar6.rnc -->
